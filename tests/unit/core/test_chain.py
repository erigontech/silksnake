# -*- coding: utf-8 -*-
"""The unit test for chain module."""

from typing import Dict, Tuple

import pytest
import pytest_mock

from silksnake.core import chain, kvstore
from silksnake.helpers.dbutils import tables
from silksnake.rlp import sedes

# pylint: disable=line-too-long,no-self-use,redefined-outer-name

class TestBlockchain:
    """ Unit test case for Blockchain. """
    def test_init(self):
        """ Unit test for __init__. """
        mock_database = pytest_mock.mock.Mock()
        blockchain = chain.Blockchain(mock_database)
        assert blockchain.database is mock_database
        with pytest.raises(ValueError):
            chain.Blockchain(None)

    @pytest.mark.parametrize("block_hash,table2kv,should_pass", [
        # Valid test list
        ('ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', {
            (tables.BLOCK_HEADER_NUMBERS_LABEL, 'ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', '0000000000000000'),
            (tables.BLOCK_HEADERS_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a',
                'f901e5a00000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000\
                    00000000000000000000940000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000\
                        0000000000a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000\
                            000000000000000000000000b901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                    0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                        0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                            0000000000000000000000000000000000000000000000000000000000000000000000808080808080a00000000000000000000000000000000000\
                                                00000000000000000000000000000080'),
            (tables.BLOCK_BODIES_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', 'c2c0c0'),
            }, True),

        # Invalid test list
        ('ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', {
            (tables.BLOCK_HEADER_NUMBERS_LABEL, 'ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', '0000000000000000'),
            (tables.BLOCK_HEADERS_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a',
                'f901e5a00000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000\
                    00000000000000000000940000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000\
                        0000000000a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000\
                            000000000000000000000000b901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                    0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                        0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                            0000000000000000000000000000000000000000000000000000000000000000000000808080808080a00000000000000000000000000000000000\
                                                00000000000000000000000000000080'),
            (tables.BLOCK_BODIES_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', ''), # too short
            }, False),
        ('ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', {
            (tables.BLOCK_HEADER_NUMBERS_LABEL, 'ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', '0000000000000000'),
            (tables.BLOCK_HEADERS_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a',
                'f901e5a00000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000\
                    00000000000000000000940000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000\
                        0000000000a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000\
                            000000000000000000000000b901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                    0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                        0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                            0000000000000000000000000000000000000000000000000000000000000000000000808080808080a00000000000000000000000000000000000\
                                                00000000000000000000000000000080'),
            (tables.BLOCK_BODIES_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'): ('', ''),
            }, False),
        ('ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', {
            (tables.BLOCK_HEADER_NUMBERS_LABEL, 'ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', '0000000000000000'),
            (tables.BLOCK_HEADERS_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', ''), # too short
            (tables.BLOCK_BODIES_LABEL, ''): ('', ''),
            }, False),
        ('ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', {
            (tables.BLOCK_HEADER_NUMBERS_LABEL, 'ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', '0000000000000000'),
            (tables.BLOCK_HEADERS_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'): ('', ''),
            (tables.BLOCK_BODIES_LABEL, ''): ('', ''),
            }, False),
        ('ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', {
            (tables.BLOCK_HEADER_NUMBERS_LABEL, 'ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', ''),
            (tables.BLOCK_HEADERS_LABEL, ''): ('', ''),
            (tables.BLOCK_BODIES_LABEL, ''): ('', ''),
            }, False),
        ('ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', {
            (tables.BLOCK_HEADER_NUMBERS_LABEL, 'ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'): ('', ''),
            (tables.BLOCK_HEADERS_LABEL, ''): ('', ''),
            (tables.BLOCK_BODIES_LABEL, ''): ('', ''),
            }, False),
    ])
    def test_read_block_by_hash(self, block_hash: str, table2kv: Dict[Tuple[str, str], Tuple[str, str]], should_pass: bool):
        """ Unit test for read_block_by_hash. """
        block_hash_bytes = bytes.fromhex(block_hash) if block_hash is not None else None
        mock_database = pytest_mock.mock.Mock(spec=kvstore.KV)
        mock_database.view.return_value.get.side_effect = lambda b, k: tuple(bytes.fromhex(e) if e is not None else None for e in table2kv[(b, k.hex())])
        blockchain = chain.Blockchain(mock_database)
        if should_pass:
            assert isinstance(blockchain.read_block_by_hash(block_hash_bytes) , sedes.Block)
        else:
            assert blockchain.read_block_by_hash(block_hash_bytes) is None

    @pytest.mark.parametrize("block_number,table2kv,should_pass", [
        # Valid test list
        (0, {
            (tables.BLOCK_HEADERS_LABEL, '00000000000000006e'): ('00000000000000006e', 'ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'),
            (tables.BLOCK_HEADERS_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a',
                'f901e5a00000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000\
                    00000000000000000000940000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000\
                        0000000000a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000\
                            000000000000000000000000b901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                    0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                        0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                            0000000000000000000000000000000000000000000000000000000000000000000000808080808080a00000000000000000000000000000000000\
                                                00000000000000000000000000000080'),
            (tables.BLOCK_BODIES_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', 'c2c0c0'),
            }, True),

        # Invalid test list
        (0, {
            (tables.BLOCK_HEADERS_LABEL, '00000000000000006e'): ('00000000000000006e', 'ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'),
            (tables.BLOCK_HEADERS_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a',
                'f901e5a00000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000\
                    00000000000000000000940000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000\
                        0000000000a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000\
                            000000000000000000000000b901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                    0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                        0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                            0000000000000000000000000000000000000000000000000000000000000000000000808080808080a00000000000000000000000000000000000\
                                                00000000000000000000000000000080'),
            (tables.BLOCK_BODIES_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', ''), # too short
            }, False),
        (0, {
            (tables.BLOCK_HEADERS_LABEL, '00000000000000006e'): ('00000000000000006e', 'ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'),
            (tables.BLOCK_HEADERS_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a',
                'f901e5a00000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000\
                    00000000000000000000940000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000\
                        0000000000a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000\
                            000000000000000000000000b901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                    0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                        0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
                                            0000000000000000000000000000000000000000000000000000000000000000000000808080808080a00000000000000000000000000000000000\
                                                00000000000000000000000000000080'),
            (tables.BLOCK_BODIES_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'): ('', ''),
            }, False),
        (0, {
            (tables.BLOCK_HEADERS_LABEL, '00000000000000006e'): ('00000000000000006e', 'ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'),
            (tables.BLOCK_HEADERS_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'):
                ('0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a', ''), # too short
            (tables.BLOCK_BODIES_LABEL, ''): ('', ''),
            }, False),
        (0, {
            (tables.BLOCK_HEADERS_LABEL, '00000000000000006e'): ('00000000000000006e', 'ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'),
            (tables.BLOCK_HEADERS_LABEL, '0000000000000000ec5f83325a31120741a5bb6ee5e238cc3984ccfad4465a098a555bc61526899a'): ('', ''),
            (tables.BLOCK_BODIES_LABEL, ''): ('', ''),
            }, False),
        (0, {
            (tables.BLOCK_HEADERS_LABEL, '00000000000000006e'): ('00000000000000006e', ''),
            (tables.BLOCK_HEADERS_LABEL, ''): ('', ''),
            (tables.BLOCK_BODIES_LABEL, ''): ('', ''),
            }, False),
        (0, {
            (tables.BLOCK_HEADERS_LABEL, '00000000000000006e'): ('', ''),
            (tables.BLOCK_HEADERS_LABEL, ''): ('', ''),
            (tables.BLOCK_BODIES_LABEL, ''): ('', ''),
            }, False),
    ])
    def test_read_block_by_number(self, block_number: int, table2kv: Dict[Tuple[str, str], Tuple[str, str]], should_pass: bool):
        """ Unit test for read_block_by_number. """
        mock_database = pytest_mock.mock.Mock(spec=kvstore.KV)
        mock_database.view.return_value.get.side_effect = lambda b, k: tuple(bytes.fromhex(e) if e is not None else None for e in table2kv[(b, k.hex())])
        blockchain = chain.Blockchain(mock_database)
        if should_pass:
            assert isinstance(blockchain.read_block_by_number(block_number) , sedes.Block)
        else:
            assert blockchain.read_block_by_number(block_number) is None
