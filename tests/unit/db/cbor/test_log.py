# -*- coding: utf-8 -*-
"""The unit test for hashing module."""

from typing import List

import cbor2

import pytest

from silksnake.db.cbor import log

# pylint: disable=line-too-long,no-self-use

class TestLog:
    """Test case for Log"""
    @pytest.mark.parametrize("buffer,address,topics,data,should_pass", [
        # Valid test list
        ('835412b731d23993eb97ba19e7c48ea6428edfd3e3e1845820ba5de06d22af2685c6c7765f60067f7d2b08c2d29f53cdf14d67f6d1c9bfb5275820000000000000000000000000485afa8808deb85c07c1dcbc896623f67e2e763658\
            2000000000000000000000000000000000000000000000000000000000016f4770582000000000000000000000000000000000000000000000044664c7bf6451f0000058600000000000000000000000000000000000000000000000\
                0000000000000965360000000000000000000000000000000000000000000000000000000000096635c00fdd12a308538d70ee5ab0afef1e99d2281829f4063e767db281a28e601c92',
        '12b731d23993eb97ba19e7c48ea6428edfd3e3e1', ['BA5DE06D22AF2685C6C7765F60067F7D2B08C2D29F53CDF14D67F6D1C9BFB527', '000000000000000000000000485AFA8808DEB85C07C1DCBC896623F67E2E7636',
        '00000000000000000000000000000000000000000000000000000000016F4770', '00000000000000000000000000000000000000000000044664C7BF6451F00000'],
        '00000000000000000000000000000000000000000000000000000000000965360000000000000000000000000000000000000000000000000000000000096635C00FDD12A308538D70EE5AB0AFEF1E99D2281829F4063E767DB281A28E601C92',
        True),
        ('835412b731d23993eb97ba19e7c48ea6428edfd3e3e1845820ba5de06d22af2685c6c7765f60067f7d2b08c2d29f53cdf14d67f6d1c9bfb5275820000000000000000000000000485afa8808deb85c07c1dcbc896623f67e2e763658\
            2000000000000000000000000000000000000000000000000000000000016f4770582000000000000000000000000000000000000000000000044664c7bf6451f0000058600000000000000000000000000000000000000000000000\
                0000000000000965360000000000000000000000000000000000000000000000000000000000096635c00fdd12a308538d70ee5ab0afef1e99d2281829f4063e767db281a28e601c92',
        '12b731d23993eb97ba19e7c48ea6428edfd3e3e1', ['BA5DE06D22AF2685C6C7765F60067F7D2B08C2D29F53CDF14D67F6D1C9BFB527', '000000000000000000000000485AFA8808DEB85C07C1DCBC896623F67E2E7636',
        '00000000000000000000000000000000000000000000000000000000016F4770', '00000000000000000000000000000000000000000000044664C7BF6451F00000'],
        '00000000000000000000000000000000000000000000000000000000000965360000000000000000000000000000000000000000000000000000000000096635C00FDD12A308538D70EE5AB0AFEF1E99D2281829F4063E767DB281A28E601C92',
        True),

        # Invalid test list
        (None, '', (), '', False),
        ('', '12b731d23993eb97ba19e7c48ea6428edfd3e3e1', [], '', False),
        ('80', '12b731d23993eb97ba19e7c48ea6428edfd3e3e1', [], '', False),
        ('9412b731d23993eb97ba19e7c48ea6428edfd3e3e1c080', '12b731d23993eb97ba19e7c48ea6428edfd3e3e1', [], '', False),
    ])
    def test_from_bytes(self, buffer: str, address: str, topics: List[str], data: str, should_pass: bool):
        """Unit test for from_bytes."""
        buffer_bytes = bytes.fromhex(buffer) if buffer is not None else None
        topics_bytes = [bytes.fromhex(topic) for topic in topics]
        data_bytes = bytes.fromhex(data) if data is not None else None
        if should_pass:
            log_instance = log.Log.from_bytes(buffer_bytes)
            assert log_instance.address == address
            assert log_instance.topics == topics_bytes
            assert log_instance.data == data_bytes
            assert len(str(log_instance)) > 0
            assert len(repr(log_instance)) > 0
        else:
            with pytest.raises((cbor2.CBORDecodeError, ValueError)):
                log.Log.from_bytes(buffer_bytes)
